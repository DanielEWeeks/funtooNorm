\documentclass{article}
% \VignettePackage{funtooNorm}
% \VignetteIndexEntry{Normalization of Illumina Infinium HumanMethylation450 Beadchip data}
\usepackage{graphicx}
\usepackage[margin=2cm]{geometry}
\usepackage[colorlinks=true,urlcolor=blue]{hyperref}
\usepackage{array}
\usepackage{color}
\usepackage{underscore}
%\usepackage[authoryear,round]{natbib}
\bibliographystyle{plainnat}
\usepackage{verbatim}
%\usepackage[utf8]{inputenc} % for UTF-8/single quotes from sQuote()
\usepackage{Sweave}%
% for bold symbols in mathmode
\usepackage{bm}
\usepackage{setspace}
\doublespacing

\SweaveOpts{keep.source=TRUE}

\title{Using funtooNorm}
\author{Celia Greenwood, Rapha\"el Poujol, Stepan Grinek, Kathleen Oros Klein}

\date{\today}
\sloppy
\hyphenpenalty 10000


\begin{document}
\SweaveOpts{concordance=TRUE}

\maketitle


%% Note: These are explained in '?RweaveLatex' :
%<<preliminaries, echo=FALSE>>=
%options(width=75)
%@

\section{Introduction}


The \texttt{funtooNorm} package provides  a function for normalization of
Illumina Infinium Human Methylation 450 BeadChip (Illumina 450K) data when there
are samples from multiple tissues or cell types.
The algorithm in this package represents an extension of a normalization method
introduced recently by \cite{Fortin2014, Aryee2014}. 
In addition to the percentile-specific adjustments implemented in funNorm,
funtooNorm is specifically designed to allow flexibility in the adjustments for
different cell types or tissue types. 
Percentiles of methylation levels may vary across cell types and hence the
original funNorm may not be ideal if applied to all samples simultaneously.  
Normalization separately for each cell type may introduce unwanted variability
if sample sizes are small. Therefore, this algorithm provides flexibility while
optimizing the sample size used to estimate the corrections.

Note that the current version of the package does not do a good job of
normalizing the Y chromosome probes; the funNorm method performs better.  
In a subsequent version of the package we will address this issue. 

\section{Package use}
\label{sec:package-use}

\subsection{Terminology}

As the \texttt{minfi} vignette describes nicely, the 450k array
contains two types of probes:
\begin{quote}
  CpGs measured using a Type I design are measured using a single
  color, with two different probes in the same color channel providing
  the methylated and the unmethylated measurements. CpGs measured
  using a Type II design are measured using a single probe, and two
  different colors provide the methylated and the unmethylated 
  measurements.
\end{quote}
Therefore, we dissociate the 6 types of signals in our method :
\texttt{AIGrn},  \texttt{BIGrn},  \texttt{AIRed},  \texttt{BIRed},
\texttt{AII}  and  \texttt{BII}, where the \textbf{A} (methylated) and
\textbf{B} (unmethylated) are on \textbf{Green} or \textbf{Red} channel
depending on the 3 types : \textbf{Type I Red}, \textbf{Type I Green} or
\textbf{Type II}. We will carefully talk about position when refering to a CpG 
and not about probe since the number of probes per position depends on the probe 
type of these position.


The \textbf{beta} value is computed with a default offset of \texttt{100}
 like the ILLUMINA standard but the offset can be easily change.
 
\subsection{Reading Data}

The package uses a \texttt{SampleSet} on which you can apply several functions.
This SampleSet will contain your chip data and a matching cell type for each 
sample. The first step is to create a new SampleSet for your data.
There are two ways to load your data to the package. Using the output of
\texttt{GenomeStudio} or using raw \texttt{IDAT} files and the \texttt{minfi}
package:
\begin{itemize}
  \item \texttt{GenomeStudio:} In order to create a SampleSet from GenomeStudio
  output, use the function \texttt{fromGenStudFiles}. You should first 
  generate the control probes file and the signal intensity file after loading
  your data in Genome Studio. Those `csv` files will contain sample names as
  column headers. Both should contain the exact same samples in the same order. 
  The last argument is a vector containing the cell types. In order to avoid any
  assignment error, the vector elements should be named with the exact same
  sample labels as in the Genome Studio files.
  \item Directly \texttt{From IDAT:}  Using the \texttt{minfi} package, you
  should create a \texttt{RGChannelSet} object containing all your samples 
  and use the function \texttt{fromRGChannelSet} to create your 
  \texttt{SampleSet}. Please refer to the \texttt{minfi} vignette on how 
  to create a \texttt{RGChannelSet}. The phenotype data of your object should
  contain a column name \texttt{cell_type}, you can access it via 
  \texttt{pData()}. 
\end{itemize}
There must be at least two different cell or 
tissue types in the data or the program will terminate with a warning.


\subsection{DataSet}

We are using here the small data set containing $N=6$ samples from the ILLUMINA
450K to demonstrate the usage of the package. Since the sample are not from
different cell type, this example will not produce meaningfull results.

 %The code to be inserted
%\begin{Verbatim}
<<>>= 
    require(funtooNorm)
    require(minfiData)
    # Here some fictive cell types are given for demonstration
    pData(RGsetEx)$cell_type <- rep(c("type1","type2"),3)
    mySampleSet=fromRGChannelSet(RGsetEx)
@
%\end{Verbatim}

Now you have the sampleSet ready for normalisation. From here you can already
get the Beta value before normalization. To change the default ILLUMINA offset,
you can choose \texttt{offset=100}

 %The code to be inserted
%\begin{Verbatim}
<<>>= 
    origBeta <- getRawBeta(mySampleSet)
    origBeta[1:3,1:3]
@
%\end{Verbatim}

Before normalizingwith funtooNorm  you need to choose the ideal number of
components for your data. We have set 4 as the default value for \texttt{ncmp}.

Choice of the number of components can be facilitated by examining a series of
fits with different numbers of components : Calling the

\begin{figure}
\centering
\includegraphics[width=15cm,height=15cm]{validationcurvesPCRlow.jpg}
\caption{Cross-validated root mean squared errors across percentiles of the 
signal distributions for different numbers of PCR components.  
signal A and B; probe type I red, probe type I green and probe type II.}
\label{valPCR}
\end{figure}

\texttt{plotValidationGraph} function with \texttt{type.fits = "PCR"} produces a
set of plots, showing the root mean squared errors from cross-validated fits,
for different numbers of components, separately for each type of signal AIGrn,
BIGrn, AIRed, BIRed, AII, and BII. By looking at figure \ref{valPCR}
the goal is to choose the smallest value of \texttt{ncmp} where the
cross-validated root mean squared error is fairly small across all the
quantiles.
By default, funtooNorm will perform 10-fold cross-validation,
but this can be changed with the parameter \texttt{ncv.fold}. Since this step 
can be vert long, we advice you o set the o ouput of your plot
to a pdf file: \texttt{file = "validationcurve.pdf"}. The default
fit type is \texttt{PCR}, you can change it with \texttt{type.fits="PLS"}.
 %The code to be inserted
%\begin{Verbatim}
<<>>= 
    plotValidationGraph(mySampleSet, type.fits="PCR")
@
%\end{Verbatim}

Below is a basic call to normalize this sample data set: 
funtooNorm will fit either principal component regression (PCR) or 
partial least squares regression (PLS) by specifying 
\texttt{type.fits="PCR"} or\texttt{type.fits="PLS"}.
The default is set to \texttt{PCR}, to match funNorm. 
An important user-chosen parameter is  \texttt{ncmp}, the number of components
to be included in either of these two models; these components are calculated
from the control probe data and cell type data.

%\begin{Verbatim}
<<>>= 
    mySampleSet=funtooNorm(mySampleSet,type.fits="PCR",ncmp=3)
    mySampleSet
    normBeta <- getNormBeta(mySampleSet)
    normBeta[1:3,1:3]
@
%\end{Verbatim}

To assess the performance of the normalization, one can use a measure of
intra-replicate differences \texttt{M}, described in [funtooNorm].
We provide a function \texttt{agreement} implementing this measure.
It takes as arguments a
matrix of beta values and a vector of individual ID's.
For the function to work some elements of the individual ID's vector should be
identical, indicating technical replicates. The returned value of \texttt{M} is
expected to be more similar for the data before and after normalization:
%\begin{Verbatim}
<<>>= 
    # Again, technical replicates are fictive, just for demonstration
    agreement(origBeta, c(1:5,5)) # M for data before the normalization
    agreement(normBeta, c(1:5,5)) # M for data after normalization
@
%\end{Verbatim} 
\section{FuntooNorm and the minfi package}


The \texttt{minfi} package \cite{Aryee2014} contains several tools for
analyzing and visualizing Illumina's 450k array data. This section
shows some interoperability of this package with the
\texttt{funtooNorm} package.
<<>>=
library(minfi)
@

\subsection{Using minfi to find differentially methylated CpG}


Here we demonstrate the use of \texttt{dmpFinder} on the M values:
$log(Meth/nmeth)$

%\begin{Verbatim}
<<>>= 
    age=pData(RGsetEx)$age
    dmp=dmpFinder(getNormM(mySampleSet), age, type="continuous")
    dmp[1:2,]
@
%\end{Verbatim} 


\subsection{Creating GenomicRatioSet}

Since normalization is rarely the final goal, this section shows how
to convert the output of \texttt{funtooNorm()} (the
\texttt{funtooNorm} object created in
section~\ref{sec:package-use}) to a \texttt{GenomicRatioSet} object, so
that it can be used by other tools in \texttt{minfi} like
\texttt{bumphunter()} or \texttt{blockFinder()}.

A \texttt{GenomicRatioSet} object requires some phenotype information,
so the following extract age sex and disease status from the inital 
\texttt{minfi} example.
<<>>=
phenoData <- pData(RGsetEx)[,c("age","sex","status")]
@

<<>>=
genomerange <- getGRanges(mySampleSet)

grs <- GenomicRatioSet(gr=genomerange,
                       Beta=normBeta,
                       preprocessMethod="funtooNorm",
                       pData=phenoData)

@

The default print method of a \texttt{GenomicRatioSet} object shows
basic information of that object. In this example things were kept
simple in order to show the bare necessities.
<<>>=
grs
@



\begin{thebibliography}{}
\bibitem{Fortin2014} Fortin, J.-P., et al. (2014). Functional normalization
of 450K methylation array data improves replication in large cancer studies.
\emph{Genome Biology},  15: p. 503.
\bibitem{Aryee2014} Aryee, M.J., et al. (2014). Minfi: a flexible and 
comprehensive Bioconductor package for the analysis of Infinium DNA methylation 
microarrays. \emph{Bioinformatics}, 30(10): p. 1363-9.
\bibitem{Smith2013} Smith M., et al. (2013). illuminaio:  An open source 
IDAT  parsing  tool  for  Illumina  microarrays. \emph{F1000Research}, 2:264,
2013.
\bibitem{funtooNorm}  Kathleen Oros Klein et al. (2015). \emph{funtooNorm:}
An improvement of the funNorm normalization method for methylation data from
multiple cell or tissue types.  Manuscript submitted.

\end{thebibliography}
\end{document}
